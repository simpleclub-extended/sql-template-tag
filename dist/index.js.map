{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Values supported by SQL engine.\n */\nexport type Value = unknown;\n\n/**\n * Supported value or SQL instance.\n */\nexport type RawValue = Value | Sql;\n\n/**\n * A SQL instance can be nested within each other to build SQL strings.\n */\nexport class Sql {\n  readonly values: Value[];\n  readonly strings: string[];\n\n  constructor(rawStrings: readonly string[], rawValues: readonly RawValue[]) {\n    if (rawStrings.length - 1 !== rawValues.length) {\n      if (rawStrings.length === 0) {\n        throw new TypeError(\"Expected at least 1 string\");\n      }\n\n      throw new TypeError(\n        `Expected ${rawStrings.length} strings to have ${\n          rawStrings.length - 1\n        } values`,\n      );\n    }\n\n    const valuesLength = rawValues.reduce<number>(\n      (len, value) => len + (value instanceof Sql ? value.values.length : 1),\n      0,\n    );\n\n    this.values = new Array(valuesLength);\n    this.strings = new Array(valuesLength + 1);\n\n    this.strings[0] = rawStrings[0];\n\n    // Iterate over raw values, strings, and children. The value is always\n    // positioned between two strings, e.g. `index + 1`.\n    let i = 0,\n      pos = 0;\n    while (i < rawValues.length) {\n      const child = rawValues[i++];\n      const rawString = rawStrings[i];\n\n      // Check for nested `sql` queries.\n      if (child instanceof Sql) {\n        // Append child prefix text to current string.\n        this.strings[pos] += child.strings[0];\n\n        let childIndex = 0;\n        while (childIndex < child.values.length) {\n          this.values[pos++] = child.values[childIndex++];\n          this.strings[pos] = child.strings[childIndex];\n        }\n\n        // Append raw string to current string.\n        this.strings[pos] += rawString;\n      } else {\n        this.values[pos++] = child;\n        this.strings[pos] = rawString;\n      }\n    }\n  }\n\n  get sql() {\n    const len = this.strings.length;\n    let i = 1;\n    let value = this.strings[0];\n    while (i < len) value += `?${this.strings[i++]}`;\n    return value;\n  }\n\n  get statement() {\n    const len = this.strings.length;\n    let i = 1;\n    let value = this.strings[0];\n    while (i < len) value += `:${i}${this.strings[i++]}`;\n    return value;\n  }\n\n  get text() {\n    const len = this.strings.length;\n    let i = 1;\n    let value = this.strings[0];\n    while (i < len) value += `$${i}${this.strings[i++]}`;\n    return value;\n  }\n\n  get query() {\n    return this.sql;\n  }\n\n  get params() {\n    return this.values;\n  }\n\n  inspect() {\n    return {\n      sql: this.sql,\n      statement: this.statement,\n      text: this.text,\n      query: this.query,\n      params: this.params,\n      values: this.values,\n    };\n  }\n}\n\n/**\n * Create a SQL query for a list of values.\n */\nexport function join(\n  values: readonly RawValue[],\n  separator = \",\",\n  prefix = \"\",\n  suffix = \"\",\n) {\n  if (values.length === 0) {\n    throw new TypeError(\n      \"Expected `join([])` to be called with an array of multiple elements, but got an empty array\",\n    );\n  }\n\n  return new Sql(\n    [prefix, ...Array(values.length - 1).fill(separator), suffix],\n    values,\n  );\n}\n\n/**\n * Create a SQL query for a list of structured values.\n */\nexport function bulk(\n  data: ReadonlyArray<ReadonlyArray<RawValue>>,\n  separator = \",\",\n  prefix = \"\",\n  suffix = \"\",\n) {\n  const length = data.length && data[0].length;\n\n  if (length === 0) {\n    throw new TypeError(\n      \"Expected `bulk([][])` to be called with a nested array of multiple elements, but got an empty array\",\n    );\n  }\n\n  const values = data.map((item, index) => {\n    if (item.length !== length) {\n      throw new TypeError(\n        `Expected \\`bulk([${index}][])\\` to have a length of ${length}, but got ${item.length}`,\n      );\n    }\n\n    return new Sql([\"(\", ...Array(item.length - 1).fill(separator), \")\"], item);\n  });\n\n  return new Sql(\n    [prefix, ...Array(values.length - 1).fill(separator), suffix],\n    values,\n  );\n}\n\n/**\n * Create raw SQL statement.\n */\nexport function raw(value: string) {\n  return new Sql([value], []);\n}\n\n/**\n * Placeholder value for \"no text\".\n */\nexport const empty = raw(\"\");\n\n/**\n * Create a SQL object from a template string.\n */\nexport default function sql(\n  strings: readonly string[],\n  ...values: readonly RawValue[]\n) {\n  return new Sql(strings, values);\n}\n"]}