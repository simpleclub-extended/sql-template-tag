{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Values supported by BigQuery.\n */\nexport type Value = unknown;\n\n/**\n * Plain object structure for BigQuery queries.\n */\nexport interface SqlQuery {\n  query: string;\n  params: Value[];\n}\n\n/**\n * Supported value or SQL query.\n */\nexport type RawValue = Value | SqlQuery;\n\n/**\n * Type guard to check if value is a SqlQuery object.\n */\nfunction isQueryObject(value: unknown): value is SqlQuery {\n  return (\n    typeof value === \"object\" &&\n    value !== null &&\n    \"query\" in value &&\n    \"params\" in value\n  );\n}\n\n/**\n * Process raw strings and values into a BigQuery-compatible query object.\n */\nfunction processQuery(\n  rawStrings: readonly string[],\n  rawValues: readonly RawValue[],\n): SqlQuery {\n  if (rawStrings.length - 1 !== rawValues.length) {\n    if (rawStrings.length === 0) {\n      throw new TypeError(\"Expected at least 1 string\");\n    }\n\n    throw new TypeError(\n      `Expected ${rawStrings.length} strings to have ${\n        rawStrings.length - 1\n      } values`,\n    );\n  }\n\n  const allParams: Value[] = [];\n  let result = rawStrings[0];\n\n  for (let i = 0; i < rawValues.length; i++) {\n    const value = rawValues[i];\n\n    if (isQueryObject(value)) {\n      // For nested queries, we need to inline the query and add its params\n      result += value.query;\n      for (const param of value.params) {\n        allParams.push(param);\n      }\n    } else {\n      allParams.push(value);\n      result += \"?\";\n    }\n\n    result += rawStrings[i + 1];\n  }\n\n  return { query: result, params: allParams };\n}\n\n/**\n * Create a SQL query for a list of values.\n */\nexport function join(\n  values: readonly RawValue[],\n  separator = \",\",\n  prefix = \"\",\n  suffix = \"\",\n): SqlQuery {\n  if (values.length === 0) {\n    throw new TypeError(\n      \"Expected `join([])` to be called with an array of multiple elements, but got an empty array\",\n    );\n  }\n\n  return processQuery(\n    [prefix, ...Array(values.length - 1).fill(separator), suffix],\n    values,\n  );\n}\n\n/**\n * Create a SQL query for a list of structured values.\n */\nexport function bulk(\n  data: ReadonlyArray<ReadonlyArray<RawValue>>,\n  separator = \",\",\n  prefix = \"\",\n  suffix = \"\",\n): SqlQuery {\n  const length = data.length && data[0].length;\n\n  if (length === 0) {\n    throw new TypeError(\n      \"Expected `bulk([][])` to be called with a nested array of multiple elements, but got an empty array\",\n    );\n  }\n\n  const values = data.map((item, index) => {\n    if (item.length !== length) {\n      throw new TypeError(\n        `Expected \\`bulk([${index}][])\\` to have a length of ${length}, but got ${item.length}`,\n      );\n    }\n\n    return processQuery(\n      [\"(\", ...Array(item.length - 1).fill(separator), \")\"],\n      item,\n    );\n  });\n\n  return processQuery(\n    [prefix, ...Array(values.length - 1).fill(separator), suffix],\n    values,\n  );\n}\n\n/**\n * Create raw SQL statement.\n */\nexport function raw(value: string): SqlQuery {\n  return { query: value, params: [] };\n}\n\n/**\n * Placeholder value for \"no text\".\n */\nexport const empty = raw(\"\");\n\n/**\n * Create a SQL object from a template string.\n */\nexport default function sql(\n  strings: readonly string[],\n  ...values: readonly RawValue[]\n): SqlQuery {\n  return processQuery(strings, values);\n}\n"]}